/*
* Google Analytics plugin for Azure Media Player - Microsoft Sample Code - Copyright (c) 2015 - Licensed MIT
* Attribution: "videojs-ga - v0.4.2" - Copyright (c) 2015 Michael Bensoussan - Licensed MIT
*/
(function () { var e = [].indexOf || function (e) { for (var t = 0, n = this.length; n > t; t++) if (t in this && this[t] === e) return t; return -1 }; amp.plugin("ga", function (t) { function n() { g.unloaddatasent || (g.unloaddatasent = !0, i("page", "onbeforeunload"), l.playTime && T.send(), l.bitrate && w.send()) } function i(e, n, i, a) { window.ga || window.ga2 ? (window.ga && (ga("send", "event", { eventCategory: e, eventAction: n, eventLabel: f, eventValue: a, nonInteraction: i }), t.debug && console.log("sent to ga...'send', 'event', {'eventCategory': " + e + ", 'eventAction': " + n + ", 'eventLabel': " + f + ",'eventValue': " + a + ", 'nonInteraction': " + i)), window.ga2 && (ga2("send", "event", { eventCategory: e, eventAction: n, eventLabel: f, eventValue: a, nonInteraction: i }), t.debug && console.log("sent to ga2...'send', 'event', {'eventCategory': " + e + ", 'eventAction': " + n + ", 'eventLabel': " + f + ",'eventValue': " + a + ", 'nonInteraction': " + i))) : window._gaq ? (_gaq.push(["_trackEvent", e, n, f, a, i]), t.debug && console.log("sent to gaq...'_trackEvent', " + e + ", " + n + ", " + f + ", " + a + ", " + i)) : t.debug && console.log("Google Analytics not detected") } function a(e, n) { window.ga || window.ga2 ? (window.ga && (ga("send", "exception", { exDescription: e, exFatal: n, appName: "AMP", appVersion: r.getAmpVersion() }), t.debug && console.log("sent to ga...'send', 'exception', {'exDescription': " + e + ", 'exFatal': " + n + ", 'appName': 'AMP','appVersion': " + r.getAmpVersion())), window.ga2 && (ga2("send", "exception", { exDescription: e, exFatal: n, appName: "AMP", appVersion: r.getAmpVersion() }), t.debug && console.log("sent to ga2...'send', 'exception', {'exDescription': " + e + ", 'exFatal': " + n + ", 'appName': 'AMP','appVersion': " + r.getAmpVersion()))) : t.debug && console.log("Google Analytics not detected") } var o, r = this; null == t && (t = {}); var d = {}; this.options()["data-setup"] && (o = JSON.parse(this.options()["data-setup"]), o.ga && (d = o.ga)); var s = ["playerConfig", "loaded", "playTime", "percentsPlayed", "start", "end", "play", "pause", "error", "buffering", "fullscreen", "seek", "bitrate"], u = t.eventsToTrack || d.eventsToTrack || s, l = {}; u.forEach(function (e) { l[e] = !0 }); var c = t.percentsPlayedInterval || d.percentsPlayedInterval || 20, f = t.eventLabel || d.eventLabel; t.debug = t.debug || !1; var h = [], v = 0, p = !1, g = { loadTime: 0, loadTimeStart: (new Date).getTime(), firstPlay: !1, videoElementUsed: !1, unloaddatasent: !1, updateLoadTime: function () { this.loadTime = Math.abs((new Date).getTime() - this.loadTimeStart) }, send: function () { this.loadtime < 1e5 && i("Video", "start", !0, this.loadTime) }, reset: function () { this.loadTime = 0, this.loadTimeStart = (new Date).getTime(), this.firstPlay = !1, f = t.eventLabel || d.eventLabel } }, m = { state: !1, bufferingTime: 0, bufferingTimeStart: 0, enterBuffering: function () { this.bufferingTimeStart = (new Date).getTime(), this.state = !0 }, send: function () { this.state && (this.bufferingTime = Math.abs((new Date).getTime() - this.bufferingTimeStart), 0 !== Math.round(r.currentTime()) && i("Video", "buffering", !0, this.bufferingTime), this.state = !1) }, reset: function () { this.bufferingTime = 0, this.state = !1 } }, w = { videoBuffer: null, sumBitrate: 0, sumPerceivedBandwidth: 0, sumMeasuredBandwidth: 0, downloadedChunks: 0, update: function () { r.currentDownloadBitrate() && (this.downloadedChunks += 1, this.sumBitrate += r.currentDownloadBitrate(), this.videoBuffer && (i("DownloadBitrate", r.currentDownloadBitrate(), !1, r.currentDownloadBitrate()), this.sumPerceivedBandwidth += this.videoBuffer.perceivedBandwidth, this.sumMeasuredBandwidth += this.videoBuffer.downloadCompleted.measuredBandwidth)) }, send: function () { this.downloadedChunks > 0 && (i("Download", "AverageBitrate", !1, Math.round(this.sumBitrate / this.downloadedChunks)), this.videoBuffer && (i("Download", "AveragePerceivedBandwidth", !1, Math.round(this.sumPerceivedBandwidth / this.downloadedChunks)), i("Download", "AverageMeasuredBandwidth", !1, Math.round(this.sumMeasuredBandwidth / this.downloadedChunks)))) }, reset: function () { this.videoBuffer = null, this.sumBitrate = 0, this.sumPerceivedBandwidth = 0, this.sumMeasuredBandwidth = 0, this.downloadedChunks = 0 } }, T = { totalSeconds: 0, start: function () { var e = this; this.interval = setInterval(function () { e.totalSeconds += 1 }, 1e3) }, pause: function () { clearInterval(this.interval), delete this.interval }, resume: function () { this.interval || this.start() }, send: function () { var e = (this.totalSeconds / 60).toFixed(2); i("playTimeMins", e, !1, e), i("playTimeSecs", this.totalSeconds, !1, this.totalSeconds) }, reset: function () { this.totalSeconds = 0 } }, y = function () { if (g.reset(), m.reset(), g.videoElementUsed && l.playTime && T.send(), T.reset(), v = 0, !f) { var e = r.currentSrc().split("//")[1]; e.match(/.ism\/manifest/i) && (e = e.split(/.ism\/manifest/i)[0] + ".ism/manifest"), f = e, t.debug && console.log("eventLabel set as: " + f) } l.loaded && i("Video", "loadedmetadata", !0), l.playerConfig && (i("AmpVersion", r.getAmpVersion(), !1), i("PlaybackTech", r.currentTechName(), !1), i("MimeType", r.currentType(), !1), this.isLive() ? i("isLive", "Live", !1) : i("isLive", "VOD", !1), myPlayer.currentProtectionInfo() ? i("Protection", r.currentProtectionInfo()[0].type, !1) : i("Protection", "Unencrypted", !1)), g.videoElementUsed = !0 }, b = function () { var t = Math.round(r.currentTime()); if (!this.isLive()) { var n = Math.round(r.duration()), a = Math.round(t / n * 100); a % c == 0 && 100 >= a && (e.call(h, a) < 0 && (0 !== a && (v += c, 100 >= v && i("PercentsPlayed", v, !0)), h.push(a)), 0 != a && (a != c ? i("PartsPlayed", a - c + 1 + "-" + a, !0) : i("PartsPlayed", "0-" + a, !0))) } l.bitrate && !w.videoBuffer && r.currentDownloadBitrate() && w.update() }, B = function () { g.updateLoadTime() }, L = function () { var e; e = Math.round(r.currentTime()), i("Video", "play", !0, e) }, P = function () { p = !1, g.firstPlay || (l.start && g.send(), g.firstPlay = !0), l.buffering && m.send(), l.playTime && (0 == T.totalSeconds ? T.start() : T.resume()) }, M = function () { if (l.buffering && m.send(), l.playTime && T.pause(), l.pause) { var e = Math.round(r.currentTime()), t = Math.round(r.duration()); e === t || p || i("Video", "pause", !1, e) } }, V = function () { if (p = !0, l.buffering && m.reset(), l.seek) { var e = Math.round(r.currentTime()); i("Video", "seek", !1, e) } }, E = function () { l.playTime && T.pause(), l.end && i("Video", "ended", !0) }, D = function () { m.enterBuffering() }, A = function () { w.update() }, S = function () { if (l.playTime && T.pause(), l.error) { var e; e = Math.round(r.currentTime()); var t = r.error().code.toString(16); i("Video", "error", !0, e), i("Error", t, !0, t), a(t, !0) } }, k = function () { var e = Math.round(r.currentTime()); ("function" == typeof r.isFullscreen ? r.isFullscreen() : void 0) || ("function" == typeof r.isFullScreen ? r.isFullScreen() : void 0) ? i("Video", "enter fullscreen", !1, e) : i("Video", "exit fullscreen", !1, e) }; r.addEventListener("loadedmetadata", y), l.bitrate && r.addEventListener("loadedmetadata", function () { w.send(), w.reset(), w.videoBuffer = r.videoBufferData(), w.videoBuffer && w.videoBuffer.addEventListener("downloadcompleted", A) }), l.start && r.addEventListener("canplaythrough", B), (l.percentsPlayed || l.bitrate) && r.addEventListener("timeupdate", b), r.addEventListener("playing", P), (l.playTime || l.bitrate) && (window.addEventListener("onbeforeunload", n, !1), window.addEventListener("pagehide", n, !1)), (l.error || l.playTime) && r.addEventListener("error", S), (l.end || l.playTime) && r.addEventListener("ended", E), l.play && r.addEventListener("play", L), (l.pause || l.playTime || l.buffering) && r.addEventListener("pause", M), l.buffering && r.addEventListener("waiting", D), (l.buffering || l.seek) && r.addEventListener("seeking", V), l.fullscreen && r.addEventListener("fullscreenchange", k) }) }).call(this);