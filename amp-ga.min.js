/*
* Google Analytics plugin for Azure Media Player - Microsoft Sample Code - Copyright (c) 2015 - Licensed MIT
* Attribution: "AMP-Analytics" - Copyright (c) 2015 Juan Pablo - Licensed MIT
* Attribution: "videojs-ga - v0.4.2" - Copyright (c) 2015 Michael Bensoussan - Licensed MIT
*/
(function () { var e = [].indexOf || function (e) { for (var t = 0, n = this.length; n > t; t++) if (t in this && this[t] === e) return t; return -1 }; amp.plugin("ga", function (t) { function n() { g.unloaddatasent || (g.unloaddatasent = !0, a("page", "onbeforeunload"), l.playTime && B.send(), l.bitrate && w.send()) } function a(e, n, a, i) { window.ga || window.ga2 ? (window.ga && (ga("send", "event", { eventCategory: e, eventAction: n, eventLabel: f, eventValue: i, nonInteraction: a }), t.debug && console.log("sent to ga...'send', 'event', {'eventCategory': " + e + ", 'eventAction': " + n + ", 'eventLabel': " + f + ",'eventValue': " + i + ", 'nonInteraction': " + a)), window.ga2 && (ga2("send", "event", { eventCategory: e, eventAction: n, eventLabel: f, eventValue: i, nonInteraction: a }), t.debug && console.log("sent to ga2...'send', 'event', {'eventCategory': " + e + ", 'eventAction': " + n + ", 'eventLabel': " + f + ",'eventValue': " + i + ", 'nonInteraction': " + a))) : window._gaq ? (_gaq.push(["_trackEvent", e, n, f, i, a]), t.debug && console.log("sent to gaq...'_trackEvent', " + e + ", " + n + ", " + f + ", " + i + ", " + a)) : t.debug && console.log("Google Analytics not detected") } function i(e, n) { window.ga || window.ga2 ? (window.ga && (ga("send", "exception", { exDescription: e, exFatal: n, appName: "AMP", appVersion: o.getAmpVersion() }), t.debug && console.log("sent to ga...'send', 'exception', {'exDescription': " + e + ", 'exFatal': " + n + ", 'appName': 'AMP','appVersion': " + o.getAmpVersion())), window.ga2 && (ga2("send", "exception", { exDescription: e, exFatal: n, appName: "AMP", appVersion: o.getAmpVersion() }), t.debug && console.log("sent to ga2...'send', 'exception', {'exDescription': " + e + ", 'exFatal': " + n + ", 'appName': 'AMP','appVersion': " + o.getAmpVersion()))) : t.debug && console.log("Google Analytics not detected") } var r, o = this; null == t && (t = {}); var d = {}; this.options()["data-setup"] && (r = JSON.parse(this.options()["data-setup"]), r.ga && (d = r.ga)); var s = ["playerConfig", "loaded", "playTime", "percentsPlayed", "start", "end", "play", "pause", "error", "buffering", "fullscreen", "seek", "bitrate"], u = t.eventsToTrack || d.eventsToTrack || s, l = {}; u.forEach(function (e, t, n) { l[e] = !0 }); var c = t.percentsPlayedInterval || d.percentsPlayedInterval || 20, f = t.eventLabel || d.eventLabel; t.debug = t.debug || !1; var h = [], v = 0, p = !1, g = { loadTime: 0, loadTimeStart: (new Date).getTime(), firstPlay: !1, videoElementUsed: !1, unloaddatasent: !1, updateLoadTime: function () { this.loadTime = Math.abs((new Date).getTime() - this.loadTimeStart) }, send: function () { this.loadtime < 1e5 && a("Video", "start", !0, this.loadTime) }, reset: function () { this.loadTime = 0, this.loadTimeStart = (new Date).getTime(), this.firstPlay = !1, f = t.eventLabel || d.eventLabel } }, m = { state: !1, bufferingTime: 0, bufferingTimeStart: 0, enterBuffering: function () { this.bufferingTimeStart = (new Date).getTime(), this.state = !0 }, send: function () { this.state && (this.bufferingTime = Math.abs((new Date).getTime() - this.bufferingTimeStart), 0 !== Math.round(o.currentTime()) && a("Video", "buffering", !0, this.bufferingTime), this.state = !1) }, reset: function () { this.bufferingTime = 0, this.state = !1 } }, w = { videoBuffer: null, sumBitrate: 0, sumPerceivedBandwidth: 0, sumMeasuredBandwidth: 0, downloadedChunks: 0, update: function () { o.currentDownloadBitrate() && (this.downloadedChunks += 1, this.sumBitrate += o.currentDownloadBitrate(), this.videoBuffer && (o.currentDownloadBitrate() >= 8e6 ? a("DownloadBitrateMbps", "8+", !1, o.currentDownloadBitrate()) : o.currentDownloadBitrate() >= 5e6 ? a("DownloadBitrateMbps", "5-8", !1, o.currentDownloadBitrate()) : o.currentDownloadBitrate() >= 3e6 ? a("DownloadBitrateMbps", "3-5", !1, o.currentDownloadBitrate()) : o.currentDownloadBitrate() >= 2e6 ? a("DownloadBitrateMbps", "2-3", !1, o.currentDownloadBitrate()) : o.currentDownloadBitrate() >= 1e6 ? a("DownloadBitrateMbps", "1-2", !1, o.currentDownloadBitrate()) : o.currentDownloadBitrate() >= 5e5 ? a("DownloadBitrateMbps", "0.5-1", !1, o.currentDownloadBitrate()) : o.currentDownloadBitrate() >= 0 && a("DownloadBitrateMbps", "0-0.5", !1, o.currentDownloadBitrate()), a("DownloadBitrate", o.currentDownloadBitrate(), !1, o.currentDownloadBitrate()), this.sumPerceivedBandwidth += this.videoBuffer.perceivedBandwidth, this.sumMeasuredBandwidth += this.videoBuffer.downloadCompleted.measuredBandwidth)) }, send: function () { this.downloadedChunks > 0 && (a("Download", "AverageBitrate", !1, Math.round(this.sumBitrate / this.downloadedChunks)), this.videoBuffer && (a("Download", "AveragePerceivedBandwidth", !1, Math.round(this.sumPerceivedBandwidth / this.downloadedChunks)), a("Download", "AverageMeasuredBandwidth", !1, Math.round(this.sumMeasuredBandwidth / this.downloadedChunks)))) }, reset: function () { this.videoBuffer = null, this.sumBitrate = 0, this.sumPerceivedBandwidth = 0, this.sumMeasuredBandwidth = 0, this.downloadedChunks = 0 } }, B = { totalSeconds: 0, start: function () { var e = this; this.interval = setInterval(function () { e.totalSeconds += 1 }, 1e3) }, pause: function () { clearInterval(this.interval), delete this.interval }, resume: function () { this.interval || this.start() }, send: function () { var e = (this.totalSeconds / 60).toFixed(2); a("playTimeMins", e, !1, e), a("playTimeSecs", this.totalSeconds, !1, this.totalSeconds) }, reset: function () { this.totalSeconds = 0 } }, b = function () { if (g.reset(), m.reset(), g.videoElementUsed && l.playTime && B.send(), B.reset(), v = 0, !f) { var e = o.currentSrc().split("//")[1]; e.match(/.ism\/manifest/i) && (e = e.split(/.ism\/manifest/i)[0] + ".ism/manifest"), f = e, t.debug && console.log("eventLabel set as: " + f) } l.loaded && a("Video", "loadedmetadata", !0), l.playerConfig && (a("AmpVersion", o.getAmpVersion(), !1), a("PlaybackTech", o.currentTechName(), !1), a("MimeType", o.currentType(), !1), this.isLive() ? a("isLive", "Live", !1) : a("isLive", "VOD", !1), o.currentProtectionInfo() ? a("Protection", o.currentProtectionInfo()[0].type, !1) : a("Protection", "Unencrypted", !1)), g.videoElementUsed = !0 }, T = function () { var t = Math.round(o.currentTime()); if (!this.isLive()) { var n = Math.round(o.duration()), i = Math.round(t / n * 100); i % c == 0 && 100 >= i && (e.call(h, i) < 0 && (0 !== i && (v += c, 100 >= v && a("PercentsPlayed", v, !0)), h.push(i)), 0 != i && (i != c ? a("PartsPlayed", i - c + 1 + "-" + i, !0) : a("PartsPlayed", "0-" + i, !0))) } l.bitrate && !w.videoBuffer && o.currentDownloadBitrate() && w.update() }, y = function () { g.updateLoadTime() }, D = function () { var e; e = Math.round(o.currentTime()), a("Video", "play", !0, e) }, M = function () { p = !1, g.firstPlay || (l.start && g.send(), g.firstPlay = !0), l.buffering && m.send(), l.playTime && (0 == B.totalSeconds ? B.start() : B.resume()) }, L = function () { if (l.buffering && m.send(), l.playTime && B.pause(), l.pause) { var e = Math.round(o.currentTime()), t = Math.round(o.duration()); e === t || p || a("Video", "pause", !1, e) } }, P = function () { if (p = !0, l.buffering && m.reset(), l.seek) { var e = Math.round(o.currentTime()); a("Video", "seek", !1, e) } }, V = function () { l.playTime && B.pause(), l.end && a("Video", "ended", !0) }, E = function () { m.enterBuffering() }, A = function () { w.update() }, S = function () { if (l.playTime && B.pause(), l.error) { var e; e = Math.round(o.currentTime()); var t = o.error().code.toString(16); a("Video", "error", !0, e), a("Error", t, !0, t), i(t, !0) } }, k = function () { var e = Math.round(o.currentTime()); ("function" == typeof o.isFullscreen ? o.isFullscreen() : void 0) || ("function" == typeof o.isFullScreen ? o.isFullScreen() : void 0) ? a("Video", "enter fullscreen", !1, e) : a("Video", "exit fullscreen", !1, e) }; o.addEventListener("loadedmetadata", b), l.bitrate && o.addEventListener("loadedmetadata", function () { w.send(), w.reset(), w.videoBuffer = o.videoBufferData(), w.videoBuffer && w.videoBuffer.addEventListener("downloadcompleted", A) }), l.start && o.addEventListener("canplaythrough", y), (l.percentsPlayed || l.bitrate) && o.addEventListener("timeupdate", T), o.addEventListener("playing", M), (l.playTime || l.bitrate) && (window.addEventListener("onbeforeunload", n, !1), window.addEventListener("pagehide", n, !1)), (l.error || l.playTime) && o.addEventListener("error", S), (l.end || l.playTime) && o.addEventListener("ended", V), l.play && o.addEventListener("play", D), (l.pause || l.playTime || l.buffering) && o.addEventListener("pause", L), l.buffering && o.addEventListener("waiting", E), (l.buffering || l.seek) && o.addEventListener("seeking", P), l.fullscreen && o.addEventListener("fullscreenchange", k) }) }).call(this);